- Some functions in software systems need to be applied at multiple points, but not be explicitly called from multiple
points in the code. Examples: Logging, Security, and Transaction Management. These types of functions that span multiple
points are called "cross-cutting concerns".

- Inheritance and Delegation have been used before to reuse common functionality, but Aspects are a better alternative.

- AOP Jaragon
  * Advice -> the job of an aspect, definint "what" and "when" of an asepct, using 5 different kinds, Before, After,
  After-returning, After-invoking, Around
  * Join Points -> a point in the execution of the application where an aspect can be plugged-in
  * Pointcuts -> narrow down the number of join points advised by an aspect. These define "where".
  * Aspects -> the merger of advice and pointcuts, everything comes together, what is des, where it does it, and when
  it is done.
  * Introductions -> allows the addition of new methods or attributes to existing classes
  * Weaving -> the process of applying aspects to a target object to create a new proxied object. Aspects are woven
  into the target object at the specified join points. This can happen at different points in an object's lifetime:
  Compile time, Class-Load time, or Runtime

- Spring's support for AOP comes in four styles
  1) Classic Spring proxy-based AOP (not covered)
  2) Pure-POJO aspects
  3) @AspectJ annotation-driven aspects
  4) Injected AspectJ aspects
  
- All the advice you create in Spring is written in a standard Java class. Pointers can be specified in annotations or
in XML Configuration

- Spring aspects are woven into Spring beans at runtime by wrapping them with a proxy class.

- Spring only supports method joinpoints, in contrast to other frameworks that support field and constructor joinpoints
as well

