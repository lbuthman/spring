- Def recommend using a build tool like Maven or Gradle. I choose Maven since it
is what I'm most familiar with at the moment so will be giving tips for it. The
reason it is helpful to use a build tool is for easy integration with Tomcat or
other container like Jetty, etc, easier dependency management, and ease of building
and running tests.

- The completed chapter 5 directory structure will look like this if using Maven.
This differs from the structure used in the book, but it works.

1. I used IntelliJ to create a new module in my repository for keeping notes on
the Spring in Action book. The module type was Maven, create from archetype, maven-
archetype-webapp. The groupId can be spittr and the artifactId was Exercise1 but use
whatever makes sense.

2. Customize the directory structure according to the picture above but you don't
need to create the class, interface, jsp, etc files just yet. You will need to
move some dir and create some others. For the testing folder, you need to right
click and Mark Directory As Test Sources Root.

3. Update the pom.xml to look like this.

4. You can happily code, following the books examples until you reach section 5.2.3.
When creating the interface in this section, you must add @Component for later
Autowiring purposes, otherwise the bean will not be discovered.

5. The constructors are wrong. The first needs null added as the first parameter to
this. The second needs int id field which is then passed to this.id = id.

* helpful time * In creating this project, the pom had to continually be updated for
new dependencies, like mockito-core and spring-jdbc. To successfully import these, I
had to run clean install. Maybe most people know this already but I didn't. It flushed
out all the old dependencies and brought new ones in.

6. After creating the SpittleRepository interface, the build will break until you add
an implementation of it. Spring can't find a bean unless there is an implementation.
Create a package for the dao implementation and add a simple class like <this>

7. In Listing 5.9, the test uses a mockito Mockito and hamcrest Matchers methods:
 import static org.mockito.Mockito.*; :
 import static org.hamcrest.Matchers.*;
    - There is an error in the code, you don't need to write the controller variable
twice lol.

8. In Listing 5.10, the SpittleController needs an import of Model which is not shown
in the example code: import org.springframework.ui.Model;

9. When defining the spittles function, the MAX_LONG_AS_STRING trick didn't work
since the compiler expected a constant. I just used "9223372036854775807".

10. The javax.validation is not compatible with Hibernate 5. The @Email validation
is mentioned in the source code which is why Hibernate enters the scene now, but either
way, I think the book will use it eventually anyway. I just removed both dependency;
I'm sure there are other cool ways to validate input than javax.validation.

11. Skipping Listing 5.19, since validation was skipped previously.
